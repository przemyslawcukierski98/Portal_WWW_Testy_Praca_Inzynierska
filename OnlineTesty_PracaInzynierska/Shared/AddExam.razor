@page "/add-exam"
@using OnlineTesty_Library.Models 
@inject IJSRuntime JsRuntime
@inject OnlineTesty_Library.Repositories.IExamRepositories ExamService
@inject OnlineTesty_Library.Repositories.IStudentGroupsRepositories StudentGroupsService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage

@attribute [Authorize(Roles = "Lecturer")]

<h3>Dodaj egzamin</h3>

<EditForm Model="@exam" OnValidSubmit="SubmitExam">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="name">Tytuł egzaminu</label>
        <InputText id="Name" @bind-Value="exam.Name" class="form-control" />
        <ValidationMessage For="() => exam.Name" />
    </div>
    <div class="form-group">
        <label for="name">Opis egzaminu</label>
        <InputText id="Description" @bind-Value="exam.Description" class="form-control" />
        <ValidationMessage For="() => exam.Description" />
    </div>
    <div class="form-group">
        <label for="name">Grupa studencka</label><br />
        <InputSelect id="student-group" @bind-Value="exam.StudentGroupName">
            <option value=""></option>
            @foreach (var item in StudentGroupsService.FindAllForLecturer())
            {
                <option value="@item.Name">@item.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Dodaj egzamin</button>
</EditForm>

@code {
    private Exam exam = new Exam();

    protected void SubmitExam()
    {
        if(exam.StudentGroupName == null)
        {
            return;
        }

        bool nameIsEmpty = string.IsNullOrEmpty(exam.Name);
        bool descriptionIsEmpty = string.IsNullOrEmpty(exam.Description);

        var result = ExamService.Create(exam);

        sessionStorage.SetItemAsync("idExam", exam.ID);
        NavigationManager.NavigateTo("add-question");
    }
}
