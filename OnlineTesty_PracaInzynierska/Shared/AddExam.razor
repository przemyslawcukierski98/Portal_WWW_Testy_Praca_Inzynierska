@page "/add-exam"
@using OnlineTesty_Library.Models
@inject IJSRuntime JsRuntime
@inject OnlineTesty_Library.Repositories.IExamRepositories ExamService
@inject OnlineTesty_Library.Repositories.IStudentGroupsRepositories StudentGroupsService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage

@attribute [Authorize(Roles = "Lecturer")]

<h3>Dodaj egzamin</h3>

<EditForm Model="@exam" OnValidSubmit="SubmitExam">
    <div class="form-group">
        <label for="name">Tytuł egzaminu</label>
        <InputText id="name" @bind-Value="exam.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label for="name">Opis egzaminu</label>
        <InputText id="name" @bind-Value="exam.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label for="name">Grupa studencka</label><br />
        <InputSelect id="student-group" @bind-Value="exam.StudentGroupName">
            @foreach (var item in StudentGroupsService.FindAllForLecturer())
            {
                <option value="@item.Name">@item.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Dodaj egzamin</button>
</EditForm>

@code {
    private Exam exam = new Exam();

    async Task SubmitExam()
    {
        bool nameIsEmpty = string.IsNullOrEmpty(exam.Name);
        bool descriptionIsEmpty = string.IsNullOrEmpty(exam.Description);

        // status - co z tym?
        exam.ExamStatus = "Utworzony";

        if (string.IsNullOrEmpty(exam.Name) && !string.IsNullOrEmpty(exam.Description))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Uzupełnij tytuł egzaminu");
        }
        else if (!string.IsNullOrEmpty(exam.Name) && string.IsNullOrEmpty(exam.Description))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Uzupełnij opis egzaminu");
        }
        else if (string.IsNullOrEmpty(exam.Name) && string.IsNullOrEmpty(exam.Description))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Uzupełnij tytuł oraz opis egzaminu");
        }
        else
        {
            var result = ExamService.Create(exam);

            await sessionStorage.SetItemAsync("idExam", exam.ID);
            NavigationManager.NavigateTo("add-question");
        }
    }
}
