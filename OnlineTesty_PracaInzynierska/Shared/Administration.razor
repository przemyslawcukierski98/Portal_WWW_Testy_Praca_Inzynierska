@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Administracja</h3>
<br />

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <p>Jesteś użytkownikiem o uprawnieniach administratora</p>

            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Nazwa użytkownika</th>
                        <th>Adres e-mail</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in ColUsers)
                    {
                        <tr>
                            <td>@user.Id.Substring(0, 5) ...</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                        @onclick="(() => EditUser(user))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            // popup do zmiany informacji o userze
            @if(ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edycja użytkownika</h3>

                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                                           placeholder="UserName"
                                           @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text"
                                       placeholder="Email"
                                       @bind="objUser.Email" />
                                <input class="form-control" type="password"
                                       placeholder="Password"
                                       @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                        @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />

                                <button class="btn btn-primary"
                                        @onclick="SaveUser">
                                    Save
                                </button>
                                @if (objUser.Id != "")
                                {
                                    <button class="btn btn-danger"
                                            @onclick="DeleteUser">
                                        Usuń
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <button class="btn btn-success" @onclick="AddNewUser">Nowy użytkownik</button>
        }
        else
        {
            <p>Panel dostępny tylko dla użytkownika o uprawnieniach administratora</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Zaloguj się, aby kontynuować</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    IdentityUser objUser = new IdentityUser();
    string CurrentUserRole { get; set; } = "Users";
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    List<string> Options = new List<string>() { "Student", "Lecturer", "Administrators" };
    string strError = "";
    bool ShowPopup = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    string LECTURER_ROLE = "Lecturer";
    string STUDENT_ROLE = "Student";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        IdentityRole RoleResultAdmin = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        IdentityRole RoleResultLecturer = await _RoleManager.FindByNameAsync(LECTURER_ROLE);
        IdentityRole RoleResultStudent = await _RoleManager.FindByNameAsync(STUDENT_ROLE);
        if (RoleResultAdmin == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        else if(RoleResultLecturer == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(LECTURER_ROLE));
        }
        else if(RoleResultStudent == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(STUDENT_ROLE));
        }

        var user = await _UserManager.FindByNameAsync("przemyslawcukierski98@gmail.com");
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        CurrentUser = (await authenticationStateTask).User;

        GetUsers();
    }

    void AddNewUser()
    {
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        objUser.Id = "";

        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            if (objUser.Id != "")
            {
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                user.Email = objUser.Email;

                await _UserManager.UpdateAsync(user);

                if (objUser.PasswordHash != "*****")
                {
                    var resetToken =
                        await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser =
                        await _UserManager.ResetPasswordAsync(
                            user,
                            resetToken,
                            objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError =
                                passworduser
                                .Errors
                                .FirstOrDefault()
                                .Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        return;
                    }
                }

                var UserResult =
                    await _UserManager
                    .IsInRoleAsync(user, ADMINISTRATION_ROLE);

                // w tym miejscu zmiana!!!
                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else if((CurrentUserRole == LECTURER_ROLE) & (!UserResult))
                {
                    await _UserManager.AddToRoleAsync(user, LECTURER_ROLE);
                }
                else if ((CurrentUserRole == STUDENT_ROLE) & (!UserResult))
                {
                    await _UserManager.AddToRoleAsync(user, STUDENT_ROLE);
                }
                else
                {
                    if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    {
                        await _UserManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                var NewUser = new IdentityUser {
                    UserName = objUser.UserName,
                    Email = objUser.Email,
                    EmailConfirmed = true
                };
                var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }

                    return;
                }
                else
                {
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        await _UserManager.AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                    else if(CurrentUserRole == STUDENT_ROLE)
                    {
                        await _UserManager.AddToRoleAsync(NewUser, STUDENT_ROLE);
                    }
                    else if(CurrentUserRole == LECTURER_ROLE)
                    {
                        await _UserManager.AddToRoleAsync(NewUser, LECTURER_ROLE);
                    }
                }
            }
            ShowPopup = false;

            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        objUser = _IdentityUser;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }

        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        ShowPopup = false;

        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }

        GetUsers();
    }
    void ClosePopup()
    {
        ShowPopup = false;
    }

    public void GetUsers()
    {
        strError = "";
        ColUsers = new List<IdentityUser>();

        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }
}
